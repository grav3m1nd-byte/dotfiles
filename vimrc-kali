set runtimepath+=~/.vim_runtime

source ~/.vim_runtime/vimrcs/basic.vim
source ~/.vim_runtime/vimrcs/extended.vim
source ~/.vim_runtime/vimrcs/filetypes.vim
source ~/.vim_runtime/vimrcs/plugins_config.vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => My Configs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf-8
set fileencoding=utf-8
" Use Unix as the standard file type
set fileformats=unix,dos,mac

try
    set history=5000
    syntax on
    filetype indent plugin on

    " Colorscheme
    set background=dark
    colorscheme peaksea
    
    set showcmd
    set cursorline
    set cursorcolumn

    " Add or remove a bit extra margin to the left
    set foldcolumn=0

    " Configuration to set auto completion menu after pressing tab
    set wildmenu
    set wildmenu=list:longest
    " Ignore the following file extensions
    set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx
    
catch
endtry

let g:NERDTreeWinPos = 'left'
map <leader>BE :BufExplorer<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Tabline & Statusline Customizations
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
try
    set laststatus=2  "Show Statusline
    set showtabline=2 "Show tabline
    set guioptions+=e "use GUI tabline
catch
endtry

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => lightline: my own customizations
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:lightline = {
    \ 'enable': {
    \     'statusline': 0,
	\     'tabline': 0
	\     }
    \ }
" let g:lightline = {
"       \ 'colorscheme': 'onedark',
"       \ 'active': {
"       \   'left': [ [ 'mode', 'paste' ],
"       \             [ 'fugitive' ],
"       \             [ 'readonly', 'filename', 'modified' ] ],
"       \   'right': [ [ 'syntastic', 'lineinfo' ],
"       \              [ 'percent' ],
"       \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
"       \ },
"       \ 'component': {
"       \   'readonly': '%{&filetype=="help"?"":&readonly?"üîí":""}',
"       \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
"       \   'fugitive': '%{exists("*FugitiveHead")?MyFugitive:""}'
"       \ },
"       \ 'component_visible_condition': {
"       \   'readonly': '(&filetype!="help" && &readonly)',
"       \   'modified': '(&filetype!="help" && (&modified || !&modifiable))',
"       \   'fugitive': '(exists("*FugitiveHead") && ""!=FugitiveHead())'
"       \ },
"       \ 'component_expand': {
"       \   'syntastic': 'SyntasticStatuslineFlag',
"       \ },
"       \ 'component_type': {
"       \   'syntastic': 'error',
"       \ },
"       \ 'component_function': {
"       \   'filetype': 'MyFiletype',
"       \   'fileformat': 'MyFileformat',
"       \   'fugitive': 'MyFugitive'
"       \ },
"       \ 'separator': { 'left': '', 'right': ' ' },
"       \ 'subseparator': { 'left': '', 'right': '|' }
"       \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#formatter = 'unique_tail'

let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#show_tab_type = 1
let g:airline#extensions#tabline#show_tab_count = 0
let g:airline#extensions#tabline#tab_nr_type = 1
"rename label for buffers (default: 'buffers')
let g:airline#extensions#tabline#buffers_label = 'B'

"rename label for tabs (default: 'tabs')
let g:airline#extensions#tabline#tabs_label = 'T'

let g:airline#extensions#branch#enabled = 1
let g:airline_theme = 'onedark'
let g:airline#extensions#hunks#enabled = 1
let g:airline_powerline_fonts = 1
"let g:airline#extensions#tabline#show_close_button = 1
"let g:airline#extensions#tabline#close_symbol = 'X'

" Enabling Symbols
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.readonly = 'üîí'
let g:airline_symbols.branch = 'ÔÑ¶'

" Section X and Y Modifications
let g:airline_section_x = '%{MyFiletype()}' 
let g:airline_section_y = '%{MyFileformat()}'

" Syntastic configurations
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#syntastic#error_symbol = 'E:'
let g:airline#extensions#syntastic#stl_format_err = '%E{ #%e}'
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#syntastic#get_error(),0)}'
let g:airline#extensions#syntastic#warning_symbol = 'W:'
let g:airline#extensions#syntastic#stl_format_warn = '%W{ #%w}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#syntastic#get_warning(),0)}'

" Other but default configurations
let g:airline_detect_modified = 1

"enable paste detection 
let g:airline_detect_paste = 1
"enable crypt detection >
let g:airline_detect_crypt = 1
"enable spell detection >
let g:airline_detect_spell = 1
"display spelling language when spell detection is enabled
"(if enough space is available) >
let g:airline_detect_spelllang = 1
"Set to 'flag' to get a unicode icon of the relevant country flag instead of
"the 'spelllang' itself
"
"enable iminsert detection >
let g:airline_detect_iminsert = 1
"determine whether inactive windows should have the left section collapsed
"to only the filename of that buffer.  >
let g:airline_inactive_collapse = 1
"Use alternative separators for the statusline of inactive windows >
"let g:airline_inactive_alt_sep = 1
"Remove separators from empty sections
let g:airline_skip_empty_sections = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Configuring Syntastic
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
try
"    let g:syntastic_stl_format = '[%E{Err: #%e}%B{ | }%W{Warn: #%w}]'
    let g:syntastic_enable_highlighting = 1 
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_aggregate_errors = 1
    let g:syntastic_check_on_wq = 0
    
    let g:syntastic_style_error_symbol = '‚ö°'
    let g:syntastic_error_symbol = '‚ùå'
    let g:syntastic_style_warning_symbol = '‚ùó'
    let g:syntastic_warning_symbol = '‚ùó'
    let g:syntastic_javascript_checkers = ['jslint']
    let g:syntastic_python_checkers = ['pylint']
    let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
    let g:syntastic_enable_perl_checker = 1
    let g:syntastic_vim_checkers = ['vint']
    let g:syntastic_sh_checkers = ['shellcheck', 'sh']
    let g:syntastic_yaml_checkers = ['yamllint']
    let g:syntastic_c_checkers = ['cppcheck','splint']
    let g:syntastic_cpp_checkers = ['cppcheck', 'cpplint']
    let g:syntastic_json_checkers = ['jsonlint']
    map <leader>sc :SyntasticCheck<cr>
catch
endtry

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => YAML Section
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType yaml setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab
 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => JSON Formatting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! FormatJSON()
    ":%!python3 -m json.tool
    :%!jq .
endfunction

function! RawJSON()
    ":%delete | 0put =json_encode(json_decode(@@))
    :%!jq -c .
endfunction

function! JSON2YAML()
    :%!yq e -P -
endfunction

augroup json_ft
    autocmd BufNewFile,BufRead *.ndjson set filetype=json
    autocmd FileType json nmap <Leader>jsp :call FormatJSON()<cr>
    autocmd FileType json nmap <Leader>jsr :call RawJSON()<cr>
    autocmd FileType json nmap <Leader>j2y :call JSON2YAML()<cr>
    autocmd FileType json setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab
augroup END

command! -range JSONRaw <line1>,<line2>call RawJSON()
command! -range JSONFormat <line1>,<line2>call FormatJSON()
command! -range JSON2YAML <line1>,<line2>call JSON2YAML()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => XML Formatting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! FormatXML()
    :%!python3 -c "import xml.dom.minidom, sys; print(xml.dom.minidom.parse(sys.stdin).toprettyxml())"
endfunction

augroup xml_ft
    autocmd FileType xml nmap <Leader>xp :call FormatXML()<cr>
    autocmd FileType xml setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab
augroup END

command! -range XMLFormat <line1>,<line2>call FormatXML()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Logstash Config Formatting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType logstash setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => CSV Config Formatting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup csv_ft
    autocmd BufNewFile,BufRead *.csv set filetype=csv
    let b:csv_thousands_sep = ','
    let b:csv_decimal_sep = '.'
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => DevIcons
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
try
    " Linux Fonts
    " set guifont=DroidSansMono\ Nerd\ Font\ 11
    " MacOS Fonts
    " set guifont=DroidSansMono\ Nerd\ Font:h11
    
    " loading the plugin
    let g:webdevicons_enable = 1 
    " adding the flags to NERDTree
    let g:webdevicons_enable_nerdtree = 1
    let g:webdevicons_conceal_nerdtree_brackets = 1
    "let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '
    let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
    " Settings for Airline
    let g:webdevicons_enable_airline_tabline = 1
    let g:webdevicons_enable_airline_statusline = 1
    " Enable for Ctrlp
    let g:webdevicons_enable_ctrlp = 1
catch
endtry

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => SnipMate and Completion Menu
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:snipMate = { 'snippet_version' : 1 }

set omnifunc=syntaxcomplete#Complete
set complete+=kspell
set completeopt=longest,menuone

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! MyFiletype()
  "return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype.' '.WebDevIconsGetFileTypeSymbol() : '') : ''
endfunction

function! MyFileformat()
  "return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  return winwidth(0) > 70 ? (&fileencoding.' ['.&fileformat.' '.WebDevIconsGetFileFormatSymbol()).']' : ''
endfunction
 
function! MyFugitive()
  return winwidth(0) > 70 ? (strlen(FugitiveHead()) ? FugitiveHead().' '.'ÔÑ¶' : '') : ''
endfunction

